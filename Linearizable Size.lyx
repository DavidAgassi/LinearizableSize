#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Linearizable size - project proposal
\end_layout

\begin_layout Author
David Agassi
\begin_inset Newline newline
\end_inset

308369677
\begin_inset Newline newline
\end_inset

davidio.agassi@gmail.com
\end_layout

\begin_layout Abstract
On many ADTs it is common practice to use a 
\series bold
size
\series default
 attribute that states the amount of elements stored in the ADT.
 There are 2 common ways of calculating this amount.
 The first is to iterate over the ADT and count for each call.
 The second way would be storing a variable by 
\begin_inset Quotes eld
\end_inset

the side
\begin_inset Quotes erd
\end_inset

 of the ADT and updating it with each update of the ADT depending on the
 operation performed.
 On concurrent linearizable ADTs, the 
\series bold
size
\series default
 attribute is always defined, but not always easily accessed.
 Since the 
\series bold
size
\series default
 varies in an unknown order and it concerns the whole ADT both methods face
 a similar challenge regarding linearizability, How can you test the whole
 ADT without blocking it?.
\end_layout

\begin_layout Abstract
We will focus on the second method I will call 
\begin_inset Quotes eld
\end_inset

accumulated size
\begin_inset Quotes erd
\end_inset

 since it is being accumulated by the operations performed on the ADT.
 The main challenge is having the 
\series bold
size
\series default
 constantly updated regarding the multi-threaded operations performed and
 keeping a single value.
 In this solution we relax the demands and keep 2 values.
 We will establish two accumulative 
\series bold
size
\series default
 attributes, 
\begin_inset Quotes eld
\end_inset

max size
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

min size
\begin_inset Quotes erd
\end_inset

 both being altered by the working threads.
 At each point both values agree we know the 
\series bold
size
\series default
 value precisely.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Based on 
\begin_inset Quotes eld
\end_inset

KiWi - OCC Key-Value Map
\begin_inset Quotes erd
\end_inset

 by Assaf Yifrach, Niv Gabso
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
The key of the solution is having, for every operation performed, the values
 in 
\begin_inset Quotes eld
\end_inset

max size
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

min size
\begin_inset Quotes erd
\end_inset

 moving further away at the beginning of the operation, and restoring the
 difference at the end of each operation.
 For example the 
\series bold
add
\series default
 operation would increase 
\begin_inset Quotes eld
\end_inset

max size
\begin_inset Quotes erd
\end_inset

 at the beginning, and once the 
\series bold
add
\series default
 operation completes, if it succeeds increment 
\begin_inset Quotes eld
\end_inset

min size
\begin_inset Quotes erd
\end_inset

 and if it fails, decrement 
\begin_inset Quotes eld
\end_inset

max size
\begin_inset Quotes erd
\end_inset

.
 Once 
\begin_inset Quotes eld
\end_inset

max size
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

min size
\begin_inset Quotes erd
\end_inset

 read the same value
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
in practice this could be optimized.
\end_layout

\end_inset

, it shall return it.
 I will show that if the counters 
\begin_inset Quotes eld
\end_inset

max size
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

min size
\begin_inset Quotes erd
\end_inset

 are linearizable, the 
\series bold
size
\series default
 attribute also is.
\end_layout

\begin_layout Abstract
In this paper I will create a Java Abstract Class, and implement a few wrappers
 to common ADTs
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
CuncurentBST - (copy from internet?), Java ConcurrentHashMap, Java ConcurrentLin
kedQueue
\end_layout

\end_inset

 extending the class in order to test the idea and evaluate the performance
 of such operation.
 I will use the Java LongAdder as the counters, which has a method 
\series bold
sum()
\series default
 that returns the adders value across threads.
 This method is a simple sum of differences across threads and isn't linearizabl
e.
 I will create 2 counters based on the LongAdder, one not linearizable,
 and the other is
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
using AtomicBollean
\end_layout

\end_inset

linearizable.
 The second counter should be more prone to starvation.
\end_layout

\begin_layout Part
Proof
\end_layout

\begin_layout LyX-Code
max = maxaddr.sum()
\end_layout

\begin_layout LyX-Code
while(true){
\end_layout

\begin_deeper
\begin_layout LyX-Code
min = minaddr.sum()
\end_layout

\begin_layout LyX-Code
if min>=max:
\end_layout

\begin_deeper
\begin_layout LyX-Code
return max
\end_layout

\end_deeper
\begin_layout LyX-Code
max = maxaddr.sum()
\end_layout

\begin_layout LyX-Code
if min>=max:
\end_layout

\begin_deeper
\begin_layout LyX-Code
return min
\end_layout

\end_deeper
\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout Part
Java implementation
\end_layout

\end_body
\end_document
